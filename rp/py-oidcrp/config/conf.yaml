logging:
  version: 1
  disable_existing_loggers: False
  root:
    handlers:
      - console
      - file
    level: DEBUG
  loggers:
    idp:
      level: DEBUG
  handlers:
    console:
      class: logging.StreamHandler
      stream: 'ext://sys.stdout'
      formatter: default
    file:
      class: logging.FileHandler
      filename: 'debug.log'
      formatter: default
  formatters:
    default:
      format: '%(asctime)s %(name)s %(levelname)s %(message)s'

port: &port 5000
domain: &domain CLIENT_HOST
base_url: &base_url "https://CLIENT_HOST"

http_params:
  # This is just for testing an local usage. In all other cases it MUST be True
  verify: false
  # Client side
  #client_cert: "certs/client.crt"
  #client_key: "certs/client.key"

keydefs: &keydef
  - "type": "RSA"
    "key": ''
    "use": ["sig"]
  - "type": "EC"
    "crv": "P-256"
    "use": ["sig"]

rp_keys:
  'private_path': 'private/jwks.json'
  'key_defs': *keydef
  'public_path': 'static/jwks.json'
  # this will create the jwks files if they are absent
  'read_only': False

client_preferences: &id001
  application_name: rphandler
  application_type: web
  contacts:
    - ops@example.com
  response_types:
    - code
  scope:
    - openid
    - profile
    - email
    - address
    - phone
  token_endpoint_auth_method:
    - client_secret_basic
    - client_secret_post

services: &id002
  discovery: &disc
    class: oidcservice.oidc.provider_info_discovery.ProviderInfoDiscovery
    kwargs: {}
  registration: &regist
    class: oidcservice.oidc.registration.Registration
    kwargs: {}
  authorization: &authz
    class: oidcservice.oidc.authorization.Authorization
    kwargs: {}
  accesstoken: &acctok
    class: oidcservice.oidc.access_token.AccessToken
    kwargs: {}
  userinfo: &userinfo
    class: oidcservice.oidc.userinfo.UserInfo
    kwargs: {}
  end_session: &sess
    class: oidcservice.oidc.end_session.EndSession
    kwargs: {}

clients:
  professos:
    issuer: https://ISSUER/profnet/
    redirect_uris:
      - "https://{domain}/authz_cb/professos"
    post_logout_redirect_uris:
      - "https://{domain}/session_logout/professos"
    client_preferences:
      response_types:
        - code
      scope:
        - openid
        - profile
        - email
      token_endpoint_auth_method:
        - client_secret_basic
        - client_secret_post
    services:
      discovery: *disc
      registration: *regist
      authorization: *authz
      accesstoken: *acctok
      userinfo: *userinfo
      end_session: *sess
  keycloak:
    issuer: https://keycloak/auth/realms/master/
    redirect_uris:
      - "https://{domain}/authz_cb/keycloak"
      #- "https://{domain}//ihf_cb"
    post_logout_redirect_uris:
      - "https://{domain}/session_logout/keycloak"
    client_preferences:
      response_types:
        - code
        #- code id_token token
      scope:
        - openid
        - profile
        - email
      token_endpoint_auth_method:
        - client_secret_basic
        - client_secret_post
    services:
      discovery: *disc
      registration: *regist
      authorization: *authz
      accesstoken: *acctok
      userinfo: *userinfo
      end_session: *sess
  node-oidc-provider:
    issuer: https://node-oidc-provider/
    redirect_uris:
      - "https://{domain}/authz_cb/node-oidc-provider"
    post_logout_redirect_uris:
      - "https://{domain}/session_logout/node-oidc-provider"
    client_preferences:
      response_types:
        - code
        #- code id_token token
      scope:
        - openid
        - profile
        - email
      token_endpoint_auth_method:
        - client_secret_basic
        - client_secret_post
    services:
      discovery: *disc
      registration: *regist
      authorization: *authz
      accesstoken: *acctok
      userinfo: *userinfo
      end_session: *sess
  identityserver4:
    issuer: 'https://identity-server4'
    client_id: py-oidcrp
    client_secret: 79a42e2d-1bfd-44dd-9a0b-0a7aa762fd5c
    redirect_uris:
      - "https://{domain}/authz_cb/identityserver4"
    post_logout_redirect_uris:
      - "https://{domain}/session_logout/identityserver4"
    client_preferences:
      response_types:
        - code
      scope:
        - openid
        - profile
      token_endpoint_auth_method: client_secret_basic
      #response_mode: form_post
      allow:
        issuer_mismatch: True
      services:
        discovery: *disc
        authorization: *authz
        accesstoken: *acctok
        userinfo: *userinfo
        end_session: *sess

webserver:
  port: *port
  domain: *domain
  # If BASE is https these has to be specified
  server_cert: "certs/cert.pem"
  server_key: "certs/key.pem"
  verify_ssl: false
  # If you want the clients cert to be verified
  # verify_user: optional
  # The you also need
  # ca_bundle: ''
  debug: true
