From e8689a401a5a722a628b994839399db4ffbb893f Mon Sep 17 00:00:00 2001
From: plokta <nils.engelbertz@rub.de>
Date: Fri, 15 Mar 2019 14:46:53 +0100
Subject: [PATCH 5/5] enable registration endpoint

---
 .../exceptions/ClientIDExistsException.java   | 21 +++++++
 .../manager/RegistrationEndpointManager.java  | 62 +++++++++++++++++++
 .../sso/oidc/idp/misc/ConfigDatabase.java     | 10 +++
 .../oidc/idp_webapp/RegistrationEndpoint.java | 28 ++++-----
 4 files changed, 106 insertions(+), 15 deletions(-)
 create mode 100644 oidc/idp_lib/src/main/java/org/rub/nds/elearning/sso/oidc/exceptions/ClientIDExistsException.java
 create mode 100644 oidc/idp_lib/src/main/java/org/rub/nds/elearning/sso/oidc/idp/manager/RegistrationEndpointManager.java

diff --git a/oidc/idp_lib/src/main/java/org/rub/nds/elearning/sso/oidc/exceptions/ClientIDExistsException.java b/oidc/idp_lib/src/main/java/org/rub/nds/elearning/sso/oidc/exceptions/ClientIDExistsException.java
new file mode 100644
index 0000000..e3b98bb
--- /dev/null
+++ b/oidc/idp_lib/src/main/java/org/rub/nds/elearning/sso/oidc/exceptions/ClientIDExistsException.java
@@ -0,0 +1,21 @@
+package org.rub.nds.elearning.sso.oidc.exceptions;
+
+public class ClientIDExistsException extends Exception {
+	
+	/**
+	 * Creates a new instance of <code>ClientIDExistsException</code> without
+	 * detail message.
+	 */
+	public ClientIDExistsException() {
+	}
+
+	/**
+	 * Constructs an instance of <code>ClientIDExistsException</code> with the
+	 * specified detail message.
+	 *
+	 * @param msg the detail message.
+	 */
+	public ClientIDExistsException(String msg) {
+		super(msg);
+	}
+}
diff --git a/oidc/idp_lib/src/main/java/org/rub/nds/elearning/sso/oidc/idp/manager/RegistrationEndpointManager.java b/oidc/idp_lib/src/main/java/org/rub/nds/elearning/sso/oidc/idp/manager/RegistrationEndpointManager.java
new file mode 100644
index 0000000..943b451
--- /dev/null
+++ b/oidc/idp_lib/src/main/java/org/rub/nds/elearning/sso/oidc/idp/manager/RegistrationEndpointManager.java
@@ -0,0 +1,62 @@
+package org.rub.nds.elearning.sso.oidc.idp.manager;
+
+import com.nimbusds.oauth2.sdk.ParseException;
+import com.nimbusds.oauth2.sdk.auth.Secret;
+import com.nimbusds.oauth2.sdk.client.ClientMetadata;
+import com.nimbusds.oauth2.sdk.http.HTTPRequest;
+import com.nimbusds.oauth2.sdk.http.HTTPResponse;
+import com.nimbusds.oauth2.sdk.id.ClientID;
+import com.nimbusds.openid.connect.sdk.rp.OIDCClientInformation;
+import com.nimbusds.openid.connect.sdk.rp.OIDCClientInformationResponse;
+import com.nimbusds.openid.connect.sdk.rp.OIDCClientMetadata;
+import com.nimbusds.openid.connect.sdk.rp.OIDCClientRegistrationRequest;
+import org.rub.nds.elearning.sso.oidc.database.ClientType;
+import org.rub.nds.elearning.sso.oidc.exceptions.ClientIDExistsException;
+import org.rub.nds.elearning.sso.oidc.idp.misc.ConfigDatabase;
+import org.rub.nds.elearning.sso.oidc.idp.misc.IdP_Constants;
+
+import java.net.URI;
+import java.util.Set;
+
+public class RegistrationEndpointManager {
+	public static HTTPResponse registrationRequest(HTTPRequest request) {
+		HTTPResponse httpResponse;
+		try {
+			OIDCClientRegistrationRequest regReq = OIDCClientRegistrationRequest.parse(request);
+
+			// create info object and safe it in context aka register the client
+			ClientID id = new ClientID(16);
+			Secret secret = new Secret(16);
+			// only retain one redirect_uri, even if more were provided in request
+			Set<URI> redirectUris = regReq.getOIDCClientMetadata().getRedirectionURIs();
+			URI redirectUri = redirectUris.iterator().next();
+
+			ClientType client = new ClientType();
+			client.setClientId(id.getValue());
+			client.setClientSecret(secret.getValue());
+			client.setRedirectUri(redirectUri.toString());
+			ConfigDatabase.addClient(client);
+			
+			// fix redirect URI, echo anything else
+			ClientMetadata md = regReq.getOIDCClientMetadata();
+			md.setRedirectionURIs(null);
+			md.setRedirectionURI(redirectUri);
+			
+			OIDCClientInformation clientInfo = new OIDCClientInformation(id, null, 
+					regReq.getOIDCClientMetadata(), secret);			
+			
+			OIDCClientInformationResponse regResp = new OIDCClientInformationResponse(clientInfo);
+			httpResponse = regResp.toHTTPResponse();
+		} catch (ParseException | ClientIDExistsException e) {
+			httpResponse = new HTTPResponse(400);
+            String errorMsg = IdP_Constants.errorPage_prefix;
+            errorMsg = errorMsg.concat(e.getClass().getCanonicalName());
+            errorMsg = errorMsg.concat(IdP_Constants.errorPage_message);
+            errorMsg = errorMsg.concat(e.getMessage());
+            errorMsg = errorMsg.concat(IdP_Constants.errorPage_description);
+            httpResponse.setContent(errorMsg);
+        }
+        return httpResponse;
+	}
+}
+	
diff --git a/oidc/idp_lib/src/main/java/org/rub/nds/elearning/sso/oidc/idp/misc/ConfigDatabase.java b/oidc/idp_lib/src/main/java/org/rub/nds/elearning/sso/oidc/idp/misc/ConfigDatabase.java
index 12ddf4b..309d627 100644
--- a/oidc/idp_lib/src/main/java/org/rub/nds/elearning/sso/oidc/idp/misc/ConfigDatabase.java
+++ b/oidc/idp_lib/src/main/java/org/rub/nds/elearning/sso/oidc/idp/misc/ConfigDatabase.java
@@ -10,6 +10,7 @@ import com.nimbusds.jose.jwk.JWK;
 import java.security.NoSuchAlgorithmException;
 import org.rub.nds.elearning.sso.oidc.database.ClientType;
 import org.rub.nds.elearning.sso.oidc.database.ClientsType;
+import org.rub.nds.elearning.sso.oidc.exceptions.ClientIDExistsException;
 import org.rub.nds.elearning.sso.oidc.exceptions.ClientNotFoundException;
 
 
@@ -36,6 +37,15 @@ public class ConfigDatabase{
         throw new ClientNotFoundException("Client with the ID: "+client_id+ " was not found in the database.");
     }
 
+    public static void addClient (ClientType client) throws ClientIDExistsException {
+        try {
+           ClientType c = getClient(client.getClientId());
+           throw new ClientIDExistsException("Client with ID " + client.getClientId() + " already exists.");
+        } catch (ClientNotFoundException e) {
+            clients.getClient().add(client);
+        } 
+    }
+    
     public static ClientsType getClients() {
         return clients;
     }
diff --git a/oidc/idp_webapp/src/main/java/org/rub/nds/elearning/sso/oidc/idp_webapp/RegistrationEndpoint.java b/oidc/idp_webapp/src/main/java/org/rub/nds/elearning/sso/oidc/idp_webapp/RegistrationEndpoint.java
index ea72f37..3793f21 100644
--- a/oidc/idp_webapp/src/main/java/org/rub/nds/elearning/sso/oidc/idp_webapp/RegistrationEndpoint.java
+++ b/oidc/idp_webapp/src/main/java/org/rub/nds/elearning/sso/oidc/idp_webapp/RegistrationEndpoint.java
@@ -5,6 +5,10 @@
  */
 package org.rub.nds.elearning.sso.oidc.idp_webapp;
 
+import com.nimbusds.oauth2.sdk.http.HTTPResponse;
+import com.nimbusds.oauth2.sdk.http.ServletUtils;
+import org.rub.nds.elearning.sso.oidc.idp.manager.RegistrationEndpointManager;
+
 import java.io.IOException;
 import java.io.PrintWriter;
 import javax.servlet.ServletException;
@@ -17,7 +21,7 @@ import javax.servlet.http.HttpServletResponse;
  *
  * @author vladi
  */
-@WebServlet(name = "RegistrationEndpoint", urlPatterns = {"/reg"})
+@WebServlet(name = "RegistrationEndpoint", urlPatterns = {"/register"})
 public class RegistrationEndpoint extends HttpServlet {
 
     /**
@@ -31,19 +35,9 @@ public class RegistrationEndpoint extends HttpServlet {
      */
     protected void processRequest(HttpServletRequest request, HttpServletResponse response)
             throws ServletException, IOException {
-        response.setContentType("text/html;charset=UTF-8");
-        try (PrintWriter out = response.getWriter()) {
-            /* TODO output your page here. You may use following sample code. */
-            out.println("<!DOCTYPE html>");
-            out.println("<html>");
-            out.println("<head>");
-            out.println("<title>Servlet RegistrationEndpoint</title>");            
-            out.println("</head>");
-            out.println("<body>");
-            out.println("<h1>Servlet RegistrationEndpoint at " + request.getContextPath() + "</h1>");
-            out.println("</body>");
-            out.println("</html>");
-        }
+        
+        HTTPResponse httpResponse = RegistrationEndpointManager.registrationRequest(ServletUtils.createHTTPRequest(request));
+        ServletUtils.applyHTTPResponse(httpResponse, response);
     }
 
     // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
@@ -58,7 +52,11 @@ public class RegistrationEndpoint extends HttpServlet {
     @Override
     protected void doGet(HttpServletRequest request, HttpServletResponse response)
             throws ServletException, IOException {
-        processRequest(request, response);
+        
+        response.setStatus(405);
+        response.setHeader("Content-Type", "text/html;charset=UTF-8");
+        response.getWriter().write("<html><head><title>Error</title></head><body>HTTP method GET is not supported by this URL</body></html>");
+        response.flushBuffer();
     }
 
     /**
-- 
2.17.1

